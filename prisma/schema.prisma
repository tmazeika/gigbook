generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js START

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  // GigBook START
  clockifyApiKey   String?
  payeeName        String?
  payeeDescription String?
  payeeAddress     String?
  clients          Client[]
  invoices         Invoice[]
  // GigBook END
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// NextAuth.js END

model Client {
  id        String   @id @default(cuid())
  userId    String
  name      String
  address   String
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, name])
}

model Invoice {
  id               String            @id @default(cuid())
  userId           String
  reference        String
  date             DateTime
  periodStart      DateTime
  periodEnd        DateTime
  payeeName        String
  payeeDescription String
  payeeAddress     String
  clientName       String
  clientCurrency   String
  clientAddress    String
  billingIncrement Int
  billingNetTerms  Int
  billingCurrency  String
  exchangeRateN    Int               @default(1)
  exchangeRateD    Int               @default(1)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  lineItems        InvoiceLineItem[]

  @@unique([userId, clientName, reference])
}

model InvoiceLineItem {
  id        String   @id @default(cuid())
  invoiceId String
  project   String
  task      String
  rateN     Int
  rateD     Int
  duration  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
}
